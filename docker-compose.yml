version: "3.8"

services:
  youtube_downloader:
    build:
      context: deployment/docker/downloaders
      dockerfile: docker/downloaders/Dockerfile
    volumes:
      - youtube_data:/data
    networks:
      - app_network
    restart: unless-stopped

  audio_processor:
    build:
      context: deployment/docker/audio_processor
      dockerfile: Dockerfile
    volumes:
      - audio_data:/data
    networks:
      - app_network
    restart: unless-stopped

  text_processor:
    build:
      context: deployment/docker/text_processor
      dockerfile: Dockerfile
    volumes:
      - text_data:/data
    networks:
      - app_network
    restart: unless-stopped

  transcription_service:
    build:
      context: deployment/docker/transcription_service
      dockerfile: Dockerfile
    volumes:
      - transcription_data:/data
    networks:
      - app_network
    restart: unless-stopped

  celery_worker:
    build:
      context: deployment/docker/celery
      dockerfile: Dockerfile_worker
    depends_on:
      - django_app
      - db
    volumes:
      - celery_data:/data
    networks:
      - app_network
    restart: unless-stopped

  django_app:
    build:
      context: deployment/docker/django_app
      dockerfile: Dockerfile_django
    volumes:
      - django_data:/data
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
    networks:
      - app_network
    ports:
      - "8000:8000"
    restart: unless-stopped

  reverse_proxy:
    build:
      context: deployment/docker/reverse_proxy
      dockerfile: Dockerfile_nginx
    depends_on:
      - django_app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/certs:/etc/nginx/certs # Assuming you have SSL certificates mounted here
    networks:
      - app_network
    restart: unless-stopped

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  app_network:
    driver: bridge

volumes:
  pgdata:
  youtube_data:
  audio_data:
  transcription_data:
  celery_data:
  django_data:
  text_data:
